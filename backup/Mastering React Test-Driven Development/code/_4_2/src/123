import React, { useState } from "react";
import {KeyLines} from '../react-keylines';
import {RightMouseContext} from "./RightMouseContext";
import {legendColor} from "../NodeSize/LegendColor";
import {filter, go, map, flat, sum} from "fxjs/Strict";

const RelationshipNetworkContext = React.createContext();
const { Provider } = RelationshipNetworkContext;

const RelationshipNetworkProvider = (props) => {
    const [network, setNetwork]             = useState({
        chartData: {"type": "LinkChart", "items": []},
        option : {},
        emChart: undefined
    });
    const [chartStyle, setChartStyle] = useState("lens");//standard
    const [choiceLegend, setChoiceLegend] = useState("scale");
    const [statistics, setStatistics] = useState({});

    const settingChartStyle = (style) => {
        const {emChart} = network;

        setChartStyle(style);
        emChart.layout(style, {spacing: 'auto'});
    }

    const reload = () => {
        const {emChart} = network;

        let isContainCombo = false;
        emChart.each({type: 'node', items: 'all'},function(node){
            const isCombo = emChart.combo().isCombo(node.id);
            if(isCombo){
                isContainCombo = isCombo;
                return
            }
        })

        if(isContainCombo){
            function getAllComboNodes() {
                let comboIdDict = {};
                emChart.each({ type: 'node', items: 'all' }, function (node) {
                    if (emChart.combo().isCombo(node.id)) {
                        comboIdDict[node.id] = true;
                    }
                });
                return Object.keys(comboIdDict);
            }
            emChart.combo().arrange(getAllComboNodes(), { resize: true, name: 'concentric' }).then(function(){
                emChart.layout(chartStyle, {spacing: 'auto'});
            });
        } else{
            return emChart.layout(chartStyle, {fit: true});
        }

    }

    function chartDataSetting(data, option) {
        let node = option.chardDraw.setNode(data, option.legendOption.legendData[choiceLegend].colors, choiceLegend);
        let link = option.chardDraw.setLink(data);
        let sumTransactionAmount = go(
            data.link,
            map(item => item.transactionAmount),
            map(item => parseInt(item)),
            sum
        );
        setStatistics({node: node.length.toLocaleString(), link: link.length.toLocaleString(), sumTransactionAmount: sumTransactionAmount.toLocaleString()});
        return {node, link};
    }

    function foreground(selectedIds) {
        const {emChart} = network;
        const ids = selectedIds.filter(id => emChart.getItem(id) && !emChart.combo().isCombo(id));

        if (ids.length === 0) {
            emChart.foreground(() => true, { type: 'all' });
            emChart.combo().reveal([]);
            emChart.setProperties({ id: 'p', c: '#d4d0e7', w: 3 }, true /* regex */);
        } else {
            let graphEngine = KeyLines.getGraphEngine();
            graphEngine.load(emChart.serialize());
            const links = graphEngine.neighbours(ids, { direction: 'any' }).links.concat(ids.filter(id => emChart.getItem(id).type === 'link'));

            emChart.combo().reveal(links);
            const foregroundMap = {};
            const propsToUpdate = [];
            links.forEach((id) => {
                foregroundMap[id] = true;
                propsToUpdate.push({ id, c: '#d4d0e7' });
            });
            emChart.foreground(item => foregroundMap[item.id], { type: 'link' });
            emChart.combo().find(links, { parent: 'first' }).forEach((id) => {
                if (id !== null && emChart.getItem(id).type === 'link') {
                    propsToUpdate.push({ id, bg: true });
                }
            });
            emChart.setProperties(propsToUpdate);
        }
    }

    function selectNode() {
        const {emChart} = network;
        const chartSel = emChart.selection();
        foreground(chartSel);
    }

    const loadedChardBuild = (dataApi, opt, param = {}) => {
        function getMinMax(key, data) {
            let min = Number.MAX_SAFE_INTEGER, max = Number.MIN_SAFE_INTEGER;

            for (const d of data.node) {
                if (d[key] !== null && d[key] !== '') {
                    if (min > d[key]) min = d[key];
                    if (max < d[key]) max = d[key];
                }
            }
            return {min, max};
        }
        function setLegend(data) {
            if (opt.legendOption && opt.legendOption.visible) {
                let keys = Object.keys(opt.legendOption.legendData);

                for (const key of keys) {
                    if (opt.legendOption.legendData[key].dynamic) {
                        let {min, max} = getMinMax(key, data);
                        let term = (max - min) / opt.legendOption.legendData[key].dynamicCount;
                        let optionArr = opt.legendOption.legendData[key].colors;
                        let color = Object.keys(legendColor);
                        for (let i = 0; i < opt.legendOption.legendData[key].dynamicCount; ++i) {
                            let tempValue = Math.round(max - (term * (i + 1)));
                            optionArr.push({
                                name: `${tempValue.toLocaleString()} 이하`,
                                value: tempValue,
                                op: "gte",
                                legend: legendColor[color[i]],
                                size: 1 + (0.4 * (opt.legendOption.legendData[key].dynamicCount - i))
                            })
                        }
                        optionArr.push({name: '정보없음', value: "정보없음", legend: legendColor.GRAY, op: "null", size: 1});
                    }
                }
            }
        }

        function setFilter(data) {
            go(opt.filterData.forms,
                map(form => form.items),
                flat,
                filter(item => !item.disabled),
                filter(item => item.dynamic),
                map(value => {
                    const {key} = value;
                    let {min, max} = getMinMax(key, data);

                    const term = (max - min) / value.dynamicCount;
                    let optionArr = value.options;

                    for (let i = 0; i < value.dynamicCount; ++i) {
                        let tempValue = Math.round(max - (term * (i + 1)));
                        optionArr.push({
                            title: `${tempValue.toLocaleString()} 이하`,
                            value: tempValue,
                            op: "gte"
                        })
                    }
                })
            );
        }

        return async (chart, chartElement) => {
            window.addEventListener('resize', function() {
                let w = window.innerWidth;
                let h = window.innerHeight;

                if (opt.timeBar && opt.timeBar.visible)
                    h -= opt.timeBar.height;

                KeyLines.setSize( chartElement, w, h);
                chart.zoom('fit');
            });
            try {
                setChoiceLegend(opt.legendOption.legendData.default);
                const {data} = await dataApi(param);

                let {node, link} = chartDataSetting(data, opt);

                // 옵션 생성하기
                setLegend(data);
                setFilter(data);

                setNetwork({
                    chartData: {
                        "type": "LinkChart",
                        "items": [...node, ...link]
                    },
                    option: opt,
                    emChart: chart
                })

            } catch (err) {
                console.log(err);
            }
        }
    }

    function drawChart(data) {
        const {emChart, option} = network;
        const {node, link} = chartDataSetting(data, option);

        setNetwork({
            ...network,
            chartData: {
                "type": "LinkChart",
                "items": [...node, ...link]
            }
        });
        // emChart.load({
        //     "type": "LinkChart",
        //     "items": [...node, ...link]
        // }).then(() => {
        //     emChart.layout(chartStyle, {spacing: 'auto'});
        // });
    }

    function filterChart(matchesFilters, callBack) {
        const {emChart} = network;
        emChart.filter(matchesFilters, {type: 'node'}, callBack);
    }

    return (
        <Provider value={{
            ...network,
            chartStyle,
            choiceLegend,
            setChoiceLegend,
            statistics,
            settingChartStyle,
            loadedChardBuild,
            selectNode,
            drawChart,
            filterChart,
            reload,
            ...RightMouseContext({emChart: network.emChart}),
        }}>
            {props.children}
        </Provider>
    )
}

export {
    RelationshipNetworkContext,
    RelationshipNetworkProvider
};
